---
import { getPayloadCollection } from "@services/api";
import type { Blog } from "@services/api/types";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import PostDetails from "../../../layouts/PostDetails.astro";
import Posts from "../../../layouts/Posts.astro";

export interface Props {
  post: Blog;
}

export async function getStaticPaths() {
  // TODO: draftは弾く
  const posts = await getPayloadCollection<Blog>(
    "http://localhost:8888/api/blogs"
  );

  const postResult = posts.docs.map(post => ({
    params: { slug: slugify(post) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.totalDocs).map(pageNum => ({
    // これでpropsにpostを渡してないからこの時はPostsを表示するみたいなイメージなのかな？
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;
const posts = await getPayloadCollection<Blog>(
  "http://localhost:8888/api/blogs"
);
const totalPages = getPageNumbers(posts.totalDocs);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;

console.log(totalPages);

const aaa = await getPayloadCollection<Blog>(
  "http://localhost:8888/api/blogs",
  {
    page: currentPage,
  }
);
// console.log(aaa, "なんぼ？");
---

{post ? <PostDetails post={post} /> : <Posts posts={aaa} />}
